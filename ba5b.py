# -*- coding: utf-8 -*-
"""ba5b.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l8-CN6EtciMw4wSmnIq3QpaEmisetPGy

**Length of a Longest Path in the Manhattan Tourist Problem**

Find the length of a longest path in a rectangular city.

Given: Integers n and m, followed by an n × (m+1) matrix Down and an (n+1) × m matrix Right. The two matrices are separated by the "-" symbol.

Return: The length of a longest path from source (0, 0) to sink (n, m) in the n × m rectangular grid whose edges are defined by the matrices Down and Right.
"""

def ManhattanTourist(n,m,Down,Right):

    matrix=[]
    for i in range(n+1):
        matrix.append([])
    matrix[0].append(0)
    
    for i in range(1, n+1):
        
        matrix[i].append(matrix[i-1][0] + int(Down[i-1][0]))
   
    for j in range(1, m+1):
        
        matrix[0].append(matrix[0][j-1] + int(Right[0][j-1]))

    for i in range(1,n+1):
        for j in range(1,m+1):

            matrix[i].append(max(matrix[i-1][j] + int(Down[i-1][j]),
                               matrix[i][j-1] + int(Right[i][j-1])))

    return matrix[n][m]

f=open('rosalind_ba5b.txt')
lines=f.readlines()

n = int(lines[0].strip('\n').split(' ')[0])
m = int(lines[0].strip('\n').split(' ')[1])
Down = []
Right = []

for i in range(1,n+1):

    Down.append(lines[i].strip('\n').split(' '))

for i in range(n+2, n+2+n+1):

    Right.append(lines[i].strip('\n').split(' '))

print(ManhattanTourist(n,m,Down,Right))