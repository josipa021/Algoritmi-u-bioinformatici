# -*- coding: utf-8 -*-
"""ba3d.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18P5BtM5ip7LKEDW8497hjdGSDt_38U2w

**De Bruijn Graph from a String Problem**

Construct the de Bruijn graph of a string.

Given: An integer k and a string Text.

Return:DeBruijnk(Text), in the form of an adjacency list.
"""

def DeBruijn(k,Text):
    r = k-1
    overlaps = {} # spremam u dictionary
    # kljuc ce bit (k-1)-mer, a vrijednost niz onih koji se nadovezuju na njega
    out = ""
    for i in range(0,len(Text)-k+1):
        # spremam u niz jer se isti (k-1)-mer moze pojaviti viÅ¡e puta u zadanom stringu
        if Text[i:i+r] not in overlaps:
            overlaps[Text[i:i+r]] = [Text[i+1:i+r+1]]
        else:
            overlaps[Text[i:i+r]].append(Text[i+1:i+r+1])

    for key in overlaps:
        out += key + " -> "
        for element in sorted(overlaps[key]):
            out += element + ","
        out = out.strip(",") # brisem zadnji zarez
        out += "\n"

    return out

f=open('rosalind_ba3d.txt')
lista=f.readlines()

print(DeBruijn(int(lista[0].strip('\n')),lista[1].strip('\n')))