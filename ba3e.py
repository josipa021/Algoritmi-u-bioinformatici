# -*- coding: utf-8 -*-
"""ba3e.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1og0FCLuNsp9rQQgHoWDPIg9vebsTJHj8

Given an arbitrary collection of k-mers Patterns (where some k-mers may appear multiple times), we define CompositionGraph(Patterns) as a graph with |Patterns| isolated edges. Every edge is labeled by a k-mer from Patterns, and the starting and ending nodes of an edge are labeled by the prefix and suffix of the k-mer labeling that edge. We then define the de Bruijn graph of Patterns, denoted DeBruijn(Patterns), by gluing identically labeled nodes in CompositionGraph(Patterns), which yields the following algorithm.

**De Bruijn Graph from k-mers Problem**

Construct the de Bruijn graph from a collection of k-mers.

Given: A collection of k-mers Patterns.

Return: The de Bruijn graph DeBruijn(Patterns), in the form of an adjacency list.
"""

def DeBruijn(Patterns):
    k = len(Patterns[0])
    nodes = {}
    out = ""
    for i in range(0,len(Patterns)):
        prefix = Patterns[i][0:k-1]
        suffix = Patterns[i][1:k]
        if (prefix not in nodes.keys()):
            nodes[prefix] = [suffix] # prefix je kljuc, suffix ide u vrijednosti
        else:
            nodes[prefix].append(suffix)
    for prefix in nodes.keys():
        out += prefix + " -> "
        for suffix in sorted(nodes[prefix]):
            out += suffix + ","
        out = out.strip(",") 
        out += "\n"
    return out

f=open('rosalind_ba3e.txt')
lista=f.readlines()

for i in range(0,len(lista)):
  lista[i]=lista[i].strip('\n')

print(DeBruijn(lista))