# -*- coding: utf-8 -*-
"""ba4c.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1agPggmf5t5MNCsSCPWRVG9zRpLBMZM7V

**Generating Theoretical Spectrum Problem**

Generate the theoretical spectrum of a cyclic peptide.

Given: An amino acid string Peptide.

Return: Cyclospectrum(Peptide).
"""

def CycloSpectrum(Peptide):
    # iz slike na rosalindu
    AminoAcids = 'GASPVTCILNDKQEMHFRYW'
    Mass = [57,71,87,97,99,101,103,113,113,114,115,128,128,129,131,137,147,
            156,163,186]

    n = len(Peptide)

    Subpeptides=['']
    Spectrum=[0]


    '''
    Petlja 'i' ide po redu po pozicijama u peptidu, a petlja 'j' odreduje
    duljinu subpeptida. U svakom koraku dodaje se jos jedan znak subpeptidu
    i tako dobijemo subpeptid duljine za jedan vece od prethodnog i za dobiti
    njegovu masu uzmemo masu prethodnog i dodamo masu zadnjeg znaka
   (dakle za svaki kmer pamtimo masu (k-1)-mera koju smo vec spremili u spektar)
    Kako npr u peptidu LEQN uzimamo subpeptid NLE (pocetna pozicija 3, duljina
    3), moramo za poziciju pojedinih slova uzimati ostatak pri dijeljenju k sa
    duljinom peptida, jer su pozicije slova unutar NLE jednake  3 0 1, a k ide
    od 3 do 5
    '''
    for i in range(0,n):

        subpeptide = ''
        subpeptide_mass = 0
        
        for j in range(1,n):

            subpeptide += Peptide[(i+j)%n]
            index = AminoAcids.index(Peptide[(i+j)%n])
            subpeptide_mass += Mass[index]

            Spectrum.append(subpeptide_mass)
            Subpeptides.append(subpeptide)


    '''
    dodajem masu cijelog peptida tako da zbrojim mase dva komplementarna
    subpeptida, npr za LEQN to mogu biti L i EQN. Zbog ovoga nam je bilo
    potrebno spremati sve subpeptide u listu, da im se preko indexa moze
    pristupiti masama
    '''
    if (n > 1):
        first_sub = Peptide[0]
        complement = Peptide[1:]
        index_first = Subpeptides.index(first_sub)
        index_comp =  Subpeptides.index(complement)
    
        mass_all = Spectrum[index_first] + Spectrum[index_comp]
        Spectrum.append(mass_all)
    else:
        index = AminoAcids.index(Peptide)
        Spectrum.append(Mass[index])
    
    Spectrum.sort()

    return Spectrum

def Output(array):

    out = ''
    for i in range(0,len(array)):

        out += str(array[i]) + ' '

    print(out)

f=open('rosalind_ba4c.txt')
line=f.readline()

Output(CycloSpectrum(line.strip('\n')))