# -*- coding: utf-8 -*-
"""ba2c.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zVz5PYkU72LzBOdeqeS28pnLSWOBmLkv

**Profile-most Probable k-mer Problem**

Find a Profile-most probable k-mer in a string.

Given: A string Text, an integer k, and a 4 Ã— k matrix Profile.

Return: A Profile-most probable k-mer in Text. (If multiple answers exist, you may return any one.)
"""

def Row(char):

    if char == 'A':
        return 0
    if char == 'C':
        return 1
    if char == 'G':
        return 2
    if char == 'T':
        return 3

def Probability(kmer, Profile):

    prob = 1
    for i in range(0,len(kmer)):

        char = kmer[i]
        row = Row(char)
        prob *= Profile[row][i]

    return prob

def ProfileMostProbable_kMer(Text, k, Profile):

    maximum = Probability(Text[0:k],Profile)
    most_probable = Text[0:k]
    
    for i in range(1,len(Text) - k + 1):

        if (Probability(Text[i:i+k],Profile) > maximum):

            maximum = Probability(Text[i:i+k],Profile)
            most_probable = Text[i:i+k]

    return most_probable

f=open('rosalind_ba2c.txt')
lines=f.readlines()

Text = lines[0].strip('\n')
k = int(lines[1].strip('\n'))
Profile=[]

for i in range(2, len(lines)):
    
    ProfileRow = lines[i].strip('\n').split(' ')
    floatProfileRow = [float(element) for element in ProfileRow]
    Profile.append(floatProfileRow)

print(ProfileMostProbable_kMer(Text, k, Profile))