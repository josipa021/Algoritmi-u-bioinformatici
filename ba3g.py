# -*- coding: utf-8 -*-
"""ba3g.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nzOTvgm4-zet7kFfj2SpJ0m6wKh8NEoM

**Eulerian Path Problem**

Find an Eulerian path in a graph.

Given: A directed graph that contains an Eulerian path, where the graph is given in the form of an adjacency list.

Return: An Eulerian path in this graph.
"""

def rosalindInputToGraph(text):
    
    dictionary = {}
    
    for line in text:
        key, values = line.split(" -> ")
        values = values.split(",")
        dictionary[key] = values
        
    return dictionary


def eulerianCycle(graph):
    
    cycle = [list(graph.keys())[0]]
    
    while (len(graph) > 0):

        if cycle[0] == cycle[-1]:

            while not cycle[0] in graph:
                cycle.pop(0)
                cycle.append(cycle[0])
          
        start = cycle[-1]
        
        cycle.append(graph[start].pop())  
        if len(graph[start]) == 0: del graph[start]
       
    return cycle

def eulerianPath(graph):

    # find the unbalanced nodes
    balances = {}

    # set values of all nodes in graph to 0
    for key in graph.keys():
        for element in graph[key]:
            if element not in balances.keys():
                balances[element] = 0
        if key not in balances.keys():
            balances[key] = 0
    
    for sourceNode in graph.keys():
        for targetNode in graph[sourceNode]:

            # finding the difference between indegree and outdegree:
            # +1 for every time you enter this node ( -> node)
            balances[targetNode] += 1
            # -1 for every time you leave this node ( node -> )
            balances[sourceNode] -= 1
            
    
    for node in balances:

        # if you can leave a node but can't enter it:
        if balances[node] == -1:
            targetNode = node
        # if you can enter a node but can't leave it:
        if balances[node] == 1:
            sourceNode = node

    # add the missing edge
    if sourceNode in graph.keys():
        graph[sourceNode].append(targetNode)
    else:
        graph[sourceNode] = [targetNode]

    # run eulerianCycle and drop the circle closing postfix
    path = eulerianCycle(graph)[0:-1]

    # rotate until the missing edge matches end and beginning
    while path[0] != targetNode or path[-1] != sourceNode:  
       path.append(path.pop(0))
       
    return path

def Output(res):

    out = '->'.join(res)

    print (out)

f=open('rosalind_ba3g.txt')
lines=f.readlines()

for i in range (0,len(lines)):
     lines[i] = lines[i].strip('\n')

graph = rosalindInputToGraph(lines)
res = eulerianPath(graph)

Output(res)