# -*- coding: utf-8 -*-
"""ba3f.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IPO118mYfQ2T1GAlUaFlfqFuXJkIjqol

**Eulerian Cycle Problem**

Find an Eulerian cycle in a graph.

Given: An Eulerian directed graph, in the form of an adjacency list.

Return: An Eulerian cycle in this graph.
"""

def rosalindInputToGraph(text):
    
    dictionary = {}
    
    for line in text:
        key, values = line.split(" -> ") # prije -> je key, posli values
        values = values.split(",") # moran rastavit values u niz
        dictionary[key] = values # spremam u dictionary
        
    return dictionary

def EulerianCycle(graph):
    
    # pocinjen s nekim cvorom
    cycle = [list(graph.keys())[0]]
    # dok ne maknen sve cvorove iz grafa u ciklus
    while len(graph) > 0:
        # whenever cycle closes rotate to a node with remaining targets
        if cycle[0] == cycle[-1]:
            while not cycle[0] in graph:
                cycle.pop(0)
                cycle.append(cycle[0])
        # zadnji cvor ciklusa je novi pocetak
        start = cycle[-1]
        # move one target at a time from graph to the end of cycle
        cycle.append(graph[start].pop())
        # izbrisen prazne unose u dict
        if len(graph[start]) == 0: del graph[start]
        
    return cycle

def Output(res):

    out = '->'.join(res)

    print (out)

f=open('rosalind_ba3f.txt')
lines=f.readlines()

for i in range (0,len(lines)):
     lines[i] = lines[i].strip('\n')

graph = rosalindInputToGraph(lines)
res = EulerianCycle(graph)

Output(res)